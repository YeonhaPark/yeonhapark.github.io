{"componentChunkName":"component---src-templates-post-template-js","path":"/blog/understanding-c-programming-2/","result":{"data":{"markdownRemark":{"excerpt":"입문 CS50에서 제공하는 샌드박스(sandbox.cs50.io)에서 C언어를 간단히 작성해볼 수 있다. 파일을 하나 생성하여 hello.c라고 명명하고 그 안에 다음과 같은 내용을 작성한다. 대략 Hello, world…","html":"<h3>입문</h3>\n<p>CS50에서 제공하는 샌드박스(<a href=\"http://sandbox.cs50.io/\">sandbox.cs50.io</a>)에서 C언어를 간단히 작성해볼 수 있다.</p>\n<p>파일을 하나 생성하여 hello.c라고 명명하고 그 안에 다음과 같은 내용을 작성한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello, world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>대략 Hello, world라는 인삿말을 출력하라는 내용이다. 이를 실행하려면 우선 사람의 언어(영어)로 비스무리하게 작성된 것 같은 <strong>C언어를 컴퓨터가 이해할 수 있는 이진법으로 컴파일 하는 과정</strong>을 거쳐야 한다.</p>\n<p><img src=\"../../static/media/0818/cs50-1.png\" alt=\"compile procedure\"></p>\n<p>여기서 소스 코드는 C, 파이선, 자바, C++같이 한번쯤 들어봤음직한 프로그래밍 언어이며, 머신 코드는 0과 1로 작성된 컴퓨터가 이해할 수 있는 코드이다. 그리고 <strong>소스코드를 머신 코드로 변환시켜주는 역할을 하는 것이 컴파일러이다.</strong></p>\n<p>C언어에서 컴파일러를 실행하는 명령어는 <code class=\"language-text\">clang</code> 인데,</p>\n<p>터미널에서 <code class=\"language-text\">clang hello.c</code> 를 입력하면 같은 폴더 밑에 <code class=\"language-text\">a.out</code> 이라는 새로운 파일이 생긴 것을 확인할 수 있다. (a.out은 Assembly Output-어셈블리 출력-을 의미한다)</p>\n<p>머신코드로 컴파일된 a.out를 실행하면 비로소 원하는 결과물을 얻을 수 있다.</p>\n<p><img src=\"../../static/media/0818/cs50-2.png\" alt=\"printf result\"></p>\n<p>덧붙여 clang 명령어에서는 출력과 관련한 인자로 <code class=\"language-text\">-o</code> 를 사용할 수 있으며, 컴파일되는 파일명을 지정가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">clang -o hello hello.c</code></pre></div>\n<h3>문자열(String)</h3>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cs50.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    string answer <span class=\"token operator\">=</span> <span class=\"token function\">get_string</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"What's your name?\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello, %s\\n\"</span><span class=\"token punctuation\">,</span> answer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위는 컴퓨터가 What’s your name?이라는 질문을 했을 때 사용자가 답변한 내용을 출력하는 예제이다.</p>\n<p>string은 문자열을 뜻하며, answer라는 변수에 문자열을 담고 싶다면 위처럼 <code class=\"language-text\">string 변수이름</code> 형식을 사용한다.</p>\n<p>출력되는 문자열에 변수 이름을 넣으려면 문자열에 해당하는 형식지정자(placeholder)인 <code class=\"language-text\">%s</code> 를 사용하면 되는데, <code class=\"language-text\">%s</code> 자리에 사용자가 입력하는 <code class=\"language-text\">answer</code> 값이 대입된다.</p>\n<p>이제 아래 명령어를 입력하여 파일을 컴파일한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">clang -o string string.c -lcs50</code></pre></div>\n<p>끝에 있는 <code class=\"language-text\">-lcs50</code> 라는 옵션은 cs50라는 라이브러리를 연결하라는 의미이다.(<code class=\"language-text\">-l</code> 은 연결하라는 의미) 위 코드에 쓰인 <code class=\"language-text\">string</code> , <code class=\"language-text\">get_string</code> 같은 변수와 함수를 사용하기 위해선 cs50 라이브러리를 연결시켜야 하기 때문이다.</p>\n<p>위 명령어로 파일을 소스코드를 컴파일할 수도 있고, 아래처럼 간단하게 리눅스에 탑재되어 있는 <code class=\"language-text\">make</code> 명령어를 이용해 손쉽게 컴파일하는 방법도 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">make</span> string</code></pre></div>\n<p>그러면 놀랍게도 string이라는 컴파일된 파일이 만들어지게(made!) 된다.</p>\n<p><img src=\"../../static/media/0818/cs50-3.png\" alt=\"compiled file\"></p>\n<p><code class=\"language-text\">make</code>라는 명령어는 알아서(!) 어떤 파일을 생성해야 하는지, 어떤 옵션 인자를 덧붙여야 하는지 등을 찾아서 어떤 프로그램을 만들어야 하는지 찾아낸다.</p>\n<p><img src=\"../../static/media/0818/cs50-4.png\" alt=\"bash result\"></p>\n<h3>자료형, 형식 지정자</h3>\n<p><strong>자료형</strong></p>\n<ul>\n<li>char: 한 개의 문자</li>\n<li>bool: 참/거짓(true/false)</li>\n<li>double: 소숫점 뒤에 더 많은 숫자를 넣을 수 있음. 소숫점 이하 15자리까지 표기</li>\n<li>float: 실수, 소숫점 이하 6자리까지 표기</li>\n<li>int: 숫자이지만 일반적으로 특정 크기를 가짐. 일반적으로 40억 까지 셀 수 있음</li>\n<li>long: int 보다 더 넓은 범위의 숫자까지 셀 수 있음</li>\n<li>string: 문자열</li>\n</ul>\n<p><strong>형식 지정자(Placeholder)</strong></p>\n<ul>\n<li>%c : char</li>\n<li>%f: float, double</li>\n<li>%i: int</li>\n<li>%li: long</li>\n<li>%s: string</li>\n</ul>\n<p>다음은 %f 형식 지정자가 사용되는 예제이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cs50.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">float</span> price <span class=\"token operator\">=</span> <span class=\"token function\">get_float</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"What's the price?\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Your total is %f. \\n\"</span><span class=\"token punctuation\">,</span> price <span class=\"token operator\">*</span> <span class=\"token number\">1.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ ./float\nWhat's the price?\n<span class=\"token number\">10000</span>\nYour total is <span class=\"token number\">11000.000000</span>.</code></pre></div>\n<p>이렇게 소수점이 5자리가 나오는데, 소숫점을 없애고 싶다면 아래처럼 수정하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cs50.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">float</span> price <span class=\"token operator\">=</span> <span class=\"token function\">get_float</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"What's the price?\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Your total is %.0f. \\n\"</span><span class=\"token punctuation\">,</span> price <span class=\"token operator\">*</span> <span class=\"token number\">1.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">What's the price?\n<span class=\"token number\">10000</span>\nYour total is <span class=\"token number\">11000</span>.</code></pre></div>\n<h3>사용자 정의 함수, 중첩 Loop, do-while Loop</h3>\n<p><strong>사용자 정의 함수</strong></p>\n<p>C는 프로그래밍 코드를 위에서 아래 방향으로 실행한다. 따라서 <code class=\"language-text\">int main(void)</code> 함수를 가장 상위에 정의하고 그 아래에 호출되는 다른 함수를 넣게 되면 터미널은 에러를 뱉는다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cs50.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> repeatNum <span class=\"token operator\">=</span> <span class=\"token function\">get_int</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Repeat for:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">cough</span><span class=\"token punctuation\">(</span>repeatNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Error!</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">cough</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> repeat<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> repeat<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cough\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>호출되는 구간보다 함수가 정의된 구간이 아래에 있는 경우, 사용자 정의 함수를 이용하면 그런 에러를 방지할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cs50.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">cough</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> repeat<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> repeatNum <span class=\"token operator\">=</span> <span class=\"token function\">get_int</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Repeat for:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">cough</span><span class=\"token punctuation\">(</span>repeatNum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">cough</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> repeat<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> repeat<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cough\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><strong>중첩 loop</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cs50.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">do</span>\n    <span class=\"token punctuation\">{</span>\n        n <span class=\"token operator\">=</span> <span class=\"token function\">get_int</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Width: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 함수를 실행하면 다음과 같이 2차원의 #배열이 프린트되는 것을 확인할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ ./mario\nWidth: <span class=\"token number\">4</span>\n<span class=\"token comment\">####</span>\n<span class=\"token comment\">####</span>\n<span class=\"token comment\">####</span>\n<span class=\"token comment\">####</span></code></pre></div>\n<p><strong>do-while loop</strong></p>\n<p>아래 예제에서는 <code class=\"language-text\">get_positive_int</code>라는 함수를 새로 생성해주었다. 이 함수는 인자 값을 받지 않고(void) 정수형을 리턴한다(int). 그리고 do-while loop가 쓰였는데 이는 while (조건) 동안 do (어떤것)을 하라는 의미이다. 그러니까 아래의 코드는 n이 1보다 작다면 get_int함수로 새 정수를 계속해서 받고, while문에서 벗어나는 조건인 경우 n에 해당하는 변수값을 그대로 리턴하라는 뜻이다.</p>\n<p>do-while loop의 특징은 조건을 먼저 거치지 않고 먼저 do 에 해당하는 로직을 무조건 한 번 수행한 뒤 while에 해당하는 조건을 검사한다는 데에 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cs50.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">get_positive_int</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token function\">get_positive_int</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%i\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">get_positive_int</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">do</span>\n    <span class=\"token punctuation\">{</span>\n        n <span class=\"token operator\">=</span> <span class=\"token function\">get_int</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Positive integer: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> n<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>하드웨어의 한계</h3>\n<p>컴퓨터는 RAM(Random Access Memory)라는 물리적 저장자치를 갖고 있다. 이 RAM에서 프로그램들이 실행중에 저장된다. 컴퓨터가 동시에 여러 태스크를 처리할 때 사용되는 부품이다. 그러나 이는 하드웨어기 때문에 그 성능에는 한계가 있다. 즉 컴퓨터가 할 수 있는 연산에는 한계가 있다. 아래 예제를 통해 살펴보자.</p>\n<p><strong>부동 소수점 부정확성</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;cs50.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">float</span> x <span class=\"token operator\">=</span> <span class=\"token function\">get_float</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">float</span> y <span class=\"token operator\">=</span> <span class=\"token function\">get_float</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"y: \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"x / y = %.10f\\n\"</span><span class=\"token punctuation\">,</span> x <span class=\"token operator\">/</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>실행 결과</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">x: <span class=\"token number\">1</span>\ny: <span class=\"token number\">10</span>\nx / y <span class=\"token operator\">=</span> <span class=\"token number\">0.1000000015</span></code></pre></div>\n<p>0.1000000015이라는 요상한 숫자가 나왔다. 1 나누기 10은 0.1이 아니었던가? 왜 이런 결과가 나온 것일까?</p>\n<p>메모리 저장 공간이 유한하기 때문에 컴퓨터는 연산 과정 중 한계에 부딪힌다. 컴퓨터는 계산할 수 있는 값들 중 1/10과 가장 가까운 값을 저장한다. 유한한 정보를 사용해서는 무한한 숫자들을 100% 정확하게 저장할 수 없기 때문이다. 이를 <strong>부동소수점 부정확성</strong>이라고 한다.</p>\n<p><strong>오버플로우</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">*=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%i\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 코드를 실행하다보면 어느순간 다음 에러 메시지를 맞닥뜨리게 될 것이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token number\">67108864</span>\n<span class=\"token number\">134217728</span>\n<span class=\"token number\">268435456</span>\n<span class=\"token number\">536870912</span>\n<span class=\"token number\">1073741824</span>\noverflow.c:7:23: runtime error: signed integer overflow: <span class=\"token number\">1073741824</span> * <span class=\"token number\">2</span> cannot be represented <span class=\"token keyword\">in</span> <span class=\"token builtin class-name\">type</span> <span class=\"token string\">'int'</span>\n-2147483648</code></pre></div>\n<p>계속해서 숫자를 키워나가다보면 어느 순간 해당 숫자를 표현하기 위한 비트가 한계에 부딪히게 된다. 즉 더 큰 값을 저장할수가 없다. 숫자가 10어억을 넘기자 앞으로 넘어갈 1의 자리가 없어졌고 int에서는 32개의 비트가 한계이기 때문에 그 이상의 숫자는 저장할 수 없다.</p>\n<p>오버플로우로 인한 아주 유명하고 친숙한 문제가 90년대 후반 우려되었던 Y2K이다. 연도를 마지막 두 자릿수로 저장하던 관습 때문에 밀레니엄이 오면 99에서 00으로 정수 오버플로우가 발생하고, 이 때문에 전세계 전산 시스템에 혼란이 도래한다는 이슈였다. 세계는 이 문제를 방지하기 위해 수백만 달러를 투자해서 프로그래머들에게 더 많은 메모리를 이용해 이를 해결하도록 했고 많은 이들이 우려하던 상황을 막을 수 있었다.</p>","frontmatter":{"title":"C언어 입문하기 (CS50 MOOC 강의를 듣고 정리) - 1","tags":["C"],"date":"August 18, 2020","description":"C언어 기초 - 입문"}},"prev":{"frontmatter":{"title":"C언어 입문하기 (CS50 MOOC 강의를 듣고 정리) - 2"},"fields":{"slug":"/blog/understanding-c-programming-1/"}},"next":{"frontmatter":{"title":"React 인라인 스타일링에 객체를 넣으면 안되는 이유"},"fields":{"slug":"/blog/why-objects-dont-work-with-inline-styling-react/"}}},"pageContext":{"slug":"/blog/understanding-c-programming-2/","prevSlug":"/blog/understanding-c-programming-1/","nextSlug":"/blog/why-objects-dont-work-with-inline-styling-react/"}},"staticQueryHashes":["2555585279","2841359383","3159585216"]}