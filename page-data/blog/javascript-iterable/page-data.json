{
    "componentChunkName": "component---src-templates-post-template-js",
    "path": "/blog/javascript-iterable/",
    "result": {"data":{"markdownRemark":{"excerpt":"Iterable은 ES6의 등장과 함께 자바스크립트의 어떤 콜렉션도 for..of loop를 사용하여 반복 가능한 객체로 만들어주는 유용한 기능이다. 객체의  키값에 특정 형태의 함수가 들어있다면, 이를 반복 가능한 객체(iterable object) 혹은 줄여서 iterable…","html":"<p>Iterable은 ES6의 등장과 함께 자바스크립트의 어떤 콜렉션도 for..of loop를 사용하여 반복 가능한 객체로 만들어주는 유용한 기능이다.</p>\n<p>객체의 <code class=\"language-text\">Symbol.iterator</code> 키값에 특정 형태의 함수가 들어있다면, 이를 반복 가능한 객체(iterable object) 혹은 줄여서 iterable이라 부르고, 해당 객체는 iterable protocol을 만족한다고 말한다.</p>\n<p>자바스크립트에서 built-in으로 내장 iterable 특징을 갖고 있는 자료구조들은 다음과 같다.</p>\n<ul>\n<li>String</li>\n<li>Array</li>\n<li>TypedArray</li>\n<li>Map</li>\n<li>Set</li>\n</ul>\n<p>어떤 객체가 Iterable이라면, 그 객체에 대해서 아래의 기능을 사용할 수 있다.</p>\n<ul>\n<li>for…of loop</li>\n<li>spread 연산자</li>\n<li>구조분해</li>\n<li>기타 iterable을 인수로 받는 함수</li>\n</ul>\n<p>위에 언급한 built-in iterable에 해당되지 않는 오브젝트에서 이터러블을 만드는 방법은 아래와 같다.</p>\n<h3>Iteration Protocol</h3>\n<ul>\n<li>오브젝트에 Symbol.iterator 메서드를 추가한다.</li>\n<li>Symbol.iterator 메서드는 <strong>next 메서드를 포함하는 iterator(오브젝트)를 리턴</strong>한다<strong>.</strong></li>\n<li>next()가 리턴하는 밸류는 반드시 <code class=\"language-text\">{done: Boolean, value: any}</code> 형태를 갖춰야 한다. <code class=\"language-text\">value</code>는 현재 값의 상태를 나타내며, <code class=\"language-text\">done</code> 은 반드시 불리언 값을 지닌다. <code class=\"language-text\">done=true</code> 일 경우는 iteration이 끝났다는 뜻이다.</li>\n<li>for…of 루프가 시작되면, 이 루프는 위 메서드를 한번 호출한다. 이제 for..of는 리턴된 오브젝트 상에서 작동한다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> range <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">from</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">to</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span>\n<span class=\"token punctuation\">}</span>\n\nrange<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">current</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>from<span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">last</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">,</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>current <span class=\"token operator\">&lt;=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>last<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token literal-property property\">done</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>current<span class=\"token operator\">++</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token literal-property property\">done</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 1) for..of</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> num <span class=\"token keyword\">of</span> range<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 1</span>\n<span class=\"token comment\">// 2</span>\n<span class=\"token comment\">// 3</span>\n<span class=\"token comment\">// 4</span>\n<span class=\"token comment\">// 5</span>\n\n<span class=\"token comment\">// 2) spread 연산자</span>\n<span class=\"token keyword\">const</span> newRange <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">...</span>range<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">middle</span><span class=\"token operator\">:</span> <span class=\"token string\">'3'</span><span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newRange<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\">// { from: 1, to: 5, middle: '3', [Symbol(Symbol.iterator)]: [Function] }</span>\n<span class=\"token keyword\">const</span> newArr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>range<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// [1, 2, 3, 4, 5, 10, 11]</span>\n\n<span class=\"token comment\">// 3) 구조분해할당</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span><span class=\"token literal-property property\">from</span><span class=\"token operator\">:</span> beginning<span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">to</span><span class=\"token operator\">:</span> last<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> range\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>beginning<span class=\"token punctuation\">,</span> <span class=\"token string\">'beginning'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1 'beginning'</span>\n\n<span class=\"token comment\">// 4) 기타 iterable을 인수로 받는 함수</span>\nArray<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>range<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1, 2, 3, 4, 5]</span></code></pre></div>\n<p>위의 Symbol.iterator 속성에 저장되어 있는 함수는 iterator 객체를 반환하고 있다. 여기서 iterator 객체는 <strong>특별한 조건(iteratation protocol)</strong>을 만족하는 객체이다.</p>\n<h3>다른 예시</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// menu 오브젝트의 메뉴 이름만 반복해서 돌리고 싶을때</span>\n<span class=\"token keyword\">const</span> menu <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token literal-property property\">salads</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Quinoa Chicken Salad'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Santa Fe Spicy'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Capri Paradise'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">burger</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Crab Heaven'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Classic Burger'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Spicy Chicken Burger'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token literal-property property\">juice</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Orange Juice'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Carrot &amp; Apple Juice'</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nmenu<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> keysArr <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> flattened <span class=\"token operator\">=</span> keysArr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">acc<span class=\"token punctuation\">,</span> cur</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> acc<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">[</span>cur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">current</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">to</span><span class=\"token operator\">:</span> flattened<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">,</span>\n    <span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>current <span class=\"token operator\">&lt;</span> flattened<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token literal-property property\">done</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> flattened<span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>current<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">done</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// looping through menu</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> m <span class=\"token keyword\">of</span> menu<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\n'Quinoa Chicken Salad'\n'Santa Fe Spicy'\n'Capri Paradise'\n'Crab Heaven'\n'Classic Burger'\n'Spicy Chicken Burger'\n'Orange Juice'\n'Carrot &amp; Apple Juice'\n*/</span></code></pre></div>\n<br>\n<br>\n<p>참조한 사이트\n<br>\n<a href=\"https://javascript.info/iterable\">https://javascript.info/iterable</a>\n<br>\n<a href=\"https://codeburst.io/a-simple-guide-to-es6-iterators-in-javascript-with-examples-189d052c3d8e\">https://codeburst.io/a-simple-guide-to-es6-iterators-in-javascript-with-examples-189d052c3d8e</a></p>","frontmatter":{"title":"JavaScript Iterable","tags":["javascript","iterable"],"date":"November 23, 2021","description":"객체에 Symbol.iterator 속성을 적용하여 자바스크립트의 어떤 콜렉션도 반복 가능한 객체로 만들 수 있다."}},"prev":{"frontmatter":{"title":"CORS란? 그리고 이를 해결하는 방법은?"},"fields":{"slug":"/blog/what-is-cors/"}},"next":{"frontmatter":{"title":"useCallback과 React.memo를 통한 리액트 성능 최적화"},"fields":{"slug":"/blog/react-optimization-using-memoization/"}}},"pageContext":{"slug":"/blog/javascript-iterable/","prevSlug":"/blog/what-is-cors/","nextSlug":"/blog/react-optimization-using-memoization/"}},
    "staticQueryHashes": ["2555585279","2841359383","3159585216"]}