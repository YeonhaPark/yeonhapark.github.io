{"componentChunkName":"component---src-templates-post-template-js","path":"/blog/encodeURI-vs-encodeURIComponent/","result":{"data":{"markdownRemark":{"excerpt":"함수는 URI의 특정한 문자를 UTF-8로 인코딩해 하나, 둘, 셋, 혹은 네 개의 연속된 이스케이프 문자로 나타낸다.  encodeURI encodeURIComponent URI의 특정한 문자를 UTF-…","html":"<p><strong><code class=\"language-text\">encodeURI()</code></strong>\n 함수는 <a href=\"https://developer.mozilla.org/ko/docs/Glossary/URI\">URI</a>의 특정한 문자를 UTF-8로 인코딩해 하나, 둘, 셋, 혹은 네 개의 연속된 이스케이프 문자로 나타낸다. </p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> uri <span class=\"token operator\">=</span> <span class=\"token string\">'https://mozilla.org/?x=шеллы'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> encoded <span class=\"token operator\">=</span> <span class=\"token function\">encodeURI</span><span class=\"token punctuation\">(</span>uri<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>encoded<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// expected output: \"https://mozilla.org/?x=%D1%88%D0%B5%D0%BB%D0%BB%D1%8B\"</span>\n\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">decodeURI</span><span class=\"token punctuation\">(</span>encoded<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// expected output: \"https://mozilla.org/?x=шеллы\"</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// catches a malformed URI</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">이스케이프 하지 않는 문자:\n\n    A-Z a-z 0-9 ; , / ? : @ &amp; = + $ - _ . ! ~ * &#39; ( ) #</code></pre></div>\n<h3>encodeURI</h3>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">var</span> set1 <span class=\"token operator\">=</span> <span class=\"token string\">\";,/?:@&amp;=+$#\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 예약 문자, 이스케이프 하지 않는다</span>\n<span class=\"token keyword\">var</span> set2 <span class=\"token operator\">=</span> <span class=\"token string\">\"-_.!~*'()\"</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 비예약 표식, 이스케이프 하지 않는다</span>\n<span class=\"token keyword\">var</span> set3 <span class=\"token operator\">=</span> <span class=\"token string\">\"ABC abc 123\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 알파벳 및 숫자, 공백, 이스케이프 한다.</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">encodeURI</span><span class=\"token punctuation\">(</span>set1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ;,/?:@&amp;=+$#</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">encodeURI</span><span class=\"token punctuation\">(</span>set2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -_.!~*'()</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">encodeURI</span><span class=\"token punctuation\">(</span>set3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ABC%20abc%20123 (공백은 %20으로 인코딩)</span></code></pre></div>\n<h3>encodeURIComponent</h3>\n<p>URI의 특정한 문자를 UTF-8로 인코딩해 하나, 둘, 셋, 혹은 네 개의 연속된 이스케이프 문자로 나타낸다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">var</span> set1 <span class=\"token operator\">=</span> <span class=\"token string\">\";,/?:@&amp;=+$#\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 예약 문자, 이스케이프 한다.</span>\n<span class=\"token keyword\">var</span> set2 <span class=\"token operator\">=</span> <span class=\"token string\">\"-_.!~*'()\"</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 비예약 표식, 이스케이프 하지 않는다</span>\n<span class=\"token keyword\">var</span> set3 <span class=\"token operator\">=</span> <span class=\"token string\">\"ABC abc 123\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 알파벳 및 숫자, 공백, 이스케이프 한다.</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">encodeURIComponent</span><span class=\"token punctuation\">(</span>set1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// %3B%2C%2F%3F%3A%40%26%3D%2B%24%23</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">encodeURIComponent</span><span class=\"token punctuation\">(</span>set2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -_.!~*'()</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">encodeURIComponent</span><span class=\"token punctuation\">(</span>set3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ABC%20abc%20123 (공백은 %20으로 인코딩)</span></code></pre></div>\n<p>encodeURI는 GET과 POST 요청에 적합하지 않다. GET과 POST에서 특별한 문자로 취급한는 <code class=\"language-text\">&quot;&amp;&quot;</code>, <code class=\"language-text\">&quot;+&quot;</code>, <code class=\"language-text\">&quot;=&quot;</code>를 인코딩 하지 않기 때문이다. 따라서 서버에 요청을 보내거나 네이티브 앱으로 url을 전달할 때는  <code class=\"language-text\">encodeURIComponent()</code> 을 사용하도록 한다.</p>\n<p>예를 들어 쿼리 스트링 밸류 값에 넘겨지는 값이 아래와 같다면 <code class=\"language-text\">encodeURI</code>와 <code class=\"language-text\">encodeURIComponent</code>를 썼을때의 결과는 달라지게 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> title <span class=\"token operator\">=</span> <span class=\"token string\">\"안녕하세요?여러분 ;) 반갑습니다\"</span>\n<span class=\"token function\">encodeURIComponent</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ?와 ;를 이스케이프한다</span>\n<span class=\"token comment\">// '%EC%95%88%EB%85%95%ED%95%98%EC%84%B8%EC%9A%94%3F%EC%97%AC%EB%9F%AC%EB%B6%84%20%3B)%20%EB%B0%98%EA%B0%91%EC%8A%B5%EB%8B%88%EB%8B%A4'</span>\n<span class=\"token function\">encodeURI</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ?와 ;를 이스케이프하지 않는다.</span>\n<span class=\"token comment\">// '%EC%95%88%EB%85%95%ED%95%98%EC%84%B8%EC%9A%94?%EC%97%AC%EB%9F%AC%EB%B6%84%20;)%20%EB%B0%98%EA%B0%91%EC%8A%B5%EB%8B%88%EB%8B%A4'</span></code></pre></div>\n<p>encodeURIComponent는 이런 특수한 문자들을 모두 이스케이프 시키기 때문에 감쌀때 모든 uri를 감싸면 &#x26;, = 같은 쿼리스트링을 구성하는 문자도 이스케이핑 처리된다. 따라서 밸류 값에만 encodeURIComponent를 감싸주도록 하자</p>\n<p>예를 들어서 다음과 같은 url을 전달한다고 할 때</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">https://yeonhapark.github.io/blog/?location=서울&amp;title=헬로?&amp;하_이!^^</code></pre></div>\n<p>query string을 구성하는 예약어(=, ?)까지 이스케이핑을 하면 안된다. 따라서 쿼리 스트링의 밸류 값에 해당하는 값만 encodeURIComponent를 사용해 이스케이핑한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> url <span class=\"token operator\">=</span> <span class=\"token string\">\"https://yeonhapark.github.io/blog/?\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> locationVal <span class=\"token operator\">=</span> <span class=\"token string\">\"서울\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> titleVal <span class=\"token operator\">=</span> <span class=\"token string\">\"헬로?&amp;하_이!^^\"</span>\n<span class=\"token keyword\">const</span> wholeUrl <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>url<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">location=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">encodeURIComponent</span><span class=\"token punctuation\">(</span>locationVal<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">&amp;title=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">encodeURIComponent</span><span class=\"token punctuation\">(</span>titleVal<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>wholeUrl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 'https://yeonhapark.github.io/blog/?location=%EC%84%9C%EC%9A%B8&amp;title=%ED%97%AC%EB%A1%9C%3F%26%ED%95%98_%EC%9D%B4!%5E%5E'</span></code></pre></div>\n<p>encodeURI는 예약문자에 대해 이스케이프 하지 않기 때문에 url 전체에 대해서 적용할 수 있다. 그러나 params 값에 이스케이핑 할 문자가 포함되지 않는지 주의해서 사용하도록 한다.</p>","frontmatter":{"title":"encodeURI VS encodeURIComponent","tags":["encode","encoding","encodeURI","encodeURIComponent"],"date":"May 06, 2022","description":null}},"prev":null,"next":{"frontmatter":{"title":"자바스크립트 Date 오브젝트를 활용해서 시간과 날짜 개념 표현하기"},"fields":{"slug":"/blog/handling-date-and-time/"}}},"pageContext":{"slug":"/blog/encodeURI-vs-encodeURIComponent/","prevSlug":null,"nextSlug":"/blog/handling-date-and-time/"}},"staticQueryHashes":["2555585279","2841359383","3159585216"]}