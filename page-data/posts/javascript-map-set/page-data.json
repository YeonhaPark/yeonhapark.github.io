{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/javascript-map-set/","result":{"data":{"markdownRemark":{"id":"2bfef9c5-161c-5a58-92f3-867934789478","html":"<h2 id=\"map\" style=\"position:relative;\"><a href=\"#map\" aria-label=\"map permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Map</h2>\n<p><code class=\"language-text\">Map</code> is similar to <code class=\"language-text\">Object</code>. But the main difference is that <code class=\"language-text\">Map</code> allows keys of any type.</p>\n<p><code class=\"language-text\">new Map()</code> – creates the map.</p>\n<p><code class=\"language-text\">map.set(key, value)</code> – stores the value by the key.</p>\n<p><code class=\"language-text\">map.get(key)</code> – returns the value by the key, undefined if key doesn’t exist in map.</p>\n<p><code class=\"language-text\">map.has(key)</code> – returns true if the key exists, false otherwise.</p>\n<p><code class=\"language-text\">map.delete(key)</code> – removes the value by the key.</p>\n<p><code class=\"language-text\">map.clear()</code> – removes everything from the map.</p>\n<p><code class=\"language-text\">map.size</code> – returns the current element count.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'str1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// string</span>\nmap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'num1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// numeric</span>\nmap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'boolean'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// boolean</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'str1'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'num1'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'boolean'</span></code></pre></div>\n<p>For looping over a <code class=\"language-text\">map</code>, there are 3 methods.</p>\n<p><code class=\"language-text\">map.keys()</code> – returns an iterable for keys,</p>\n<p><code class=\"language-text\">map.values()</code> – returns an iterable for values,</p>\n<p><code class=\"language-text\">map.entries()</code> – returns an iterable for entries [key, value], it’s used by default in for..of.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> coffeeMenu <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">'americano'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">'espresso'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">[</span><span class=\"token string\">'latte'</span><span class=\"token punctuation\">,</span>    <span class=\"token number\">5</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> coffee <span class=\"token keyword\">of</span> coffeeMenu<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>coffee<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> costs $</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>coffeeMenu<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>coffee<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> coffee <span class=\"token keyword\">of</span> coffeeMenu<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>coffee<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> costs $</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>coffeeMenu<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>coffee<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 'americano costs $3.5'</span>\n<span class=\"token comment\">// 'espresso costs $3'</span>\n<span class=\"token comment\">// 'latte costs $5'</span></code></pre></div>\n<p><code class=\"language-text\">Map</code> has an built-in <code class=\"language-text\">forEach</code> method.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">coffeeMenu<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> map</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">key: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">, value: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><b>How to turn an object into a Map?</b></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  verano<span class=\"token operator\">:</span> <span class=\"token string\">'summer'</span><span class=\"token punctuation\">,</span>\n  primavera<span class=\"token operator\">:</span> <span class=\"token string\">'spring'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> seasonObj <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// [ [ 'verano', 'summer' ], [ 'primavera', 'spring' ] ]</span>\n\n<span class=\"token keyword\">const</span> season <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span>seasonObj<span class=\"token punctuation\">)</span>\n\nseason<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">,</span> key</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>key<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> in english: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// 'verano in english: summer'</span>\n<span class=\"token comment\">// 'primavera in english: spring'</span></code></pre></div>\n<p>then, <b>How to turn a Map into an object?</b></p>\n<p>We can use <code class=\"language-text\">Object.fromEntries</code> to get an object from <code class=\"language-text\">Map</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Object<span class=\"token punctuation\">.</span><span class=\"token function\">fromEntries</span><span class=\"token punctuation\">(</span>season<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">fromEntries</span><span class=\"token punctuation\">(</span>season<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// same result as above line</span>\n\n<span class=\"token comment\">// { verano: 'summer', primavera: 'spring' }</span>\n\n<span class=\"token keyword\">let</span> shoeBrands <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">fromEntries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">'converse'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'casual'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'nike'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'sports'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'addidas'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'sports'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// { converse: 'casual', nike: 'sports', addidas: 'sports' }</span></code></pre></div>\n<h2 id=\"set\" style=\"position:relative;\"><a href=\"#set\" aria-label=\"set permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Set</h2>\n<p><code class=\"language-text\">Set</code>’s each value occurs only once</p>\n<p><code class=\"language-text\">new Set(iterable)</code> – creates the set, and if an iterable object is provided (usually an array), copies values from it into the set.</p>\n<p><code class=\"language-text\">set.add(value)</code> – adds a value, returns the set itself.</p>\n<p><code class=\"language-text\">set.delete(value)</code> – removes the value, returns true if value existed at the moment of the call, otherwise false.</p>\n<p><code class=\"language-text\">set.has(value)</code> – returns true if the value exists in the set, otherwise false.</p>\n<p><code class=\"language-text\">set.clear()</code> – removes everything from the set.</p>\n<p><code class=\"language-text\">set.size</code> – is the elements count.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> furnitures <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'chair'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'table'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'sofa'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'doorknob'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'rug'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'table'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'sofatable'</span><span class=\"token punctuation\">]</span>\nfurnitures<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 7</span>\n\n<span class=\"token keyword\">const</span> furnitureSet <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>furnitures<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfurnitureSet<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 6</span>\n\nfurnitureSet<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">'chair'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<p><b>Iteration over Set</b></p>\n<p>We can use <code class=\"language-text\">for..of</code> or <code class=\"language-text\">forEach</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>furniture <span class=\"token keyword\">of</span> furnitureSet<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'furniture:'</span><span class=\"token punctuation\">,</span> furniture<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">set.keys()</code> – returns an iterable object for values.</p>\n<p><code class=\"language-text\">set.values()</code> – same as set.keys(), for compatibility with Map</p>\n<p><code class=\"language-text\">set.entries()</code> – returns an iterable object for entries [value, value], exists for compatibility with Map.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"></code></pre></div>\n<h2 id=\"arrayfrom\" style=\"position:relative;\"><a href=\"#arrayfrom\" aria-label=\"arrayfrom permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Array.from</h2>\n<p><b>It can be used when using Set, to convert array-like object to an array.</b></p>\n<p>The Array.from() static method creates a new, shallow-copied Array instance from an array-like or iterable object.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// expected output: Array [\"f\", \"o\", \"o\"]</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">+</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// expected output: Array [2, 4, 6]</span></code></pre></div>\n<p><b>Parameters</b></p>\n<ol>\n<li><code class=\"language-text\">arrayLike</code>\nAn array-like or iterable object to convert to an array.</li>\n<li><code class=\"language-text\">mapFn (Optional)</code>\nMap function to call on every element of the array.</li>\n<li><code class=\"language-text\">thisArg (Optional)</code>\nValue to use as this when executing mapFn</li>\n</ol>\n<p>Return value\nA new Array instance.</p>\n<p><i>References</i></p>\n<ul>\n<li><a href=\"https://javascript.info/map-set\">https://javascript.info/map-set</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from</a></li>\n<li><a href=\"https://www.samanthaming.com/tidbits/90-object-from-entries/\">https://www.samanthaming.com/tidbits/90-object-from-entries/</a></li>\n</ul>","fields":{"slug":"/posts/javascript-map-set/","tagSlugs":["/tag/data-structure/","/tag/map/","/tag/set/"]},"frontmatter":{"date":"2021-09-05","description":null,"tags":["data structure","map","set"],"title":"JavaScript Map and Set"}}},"pageContext":{"slug":"/posts/javascript-map-set/"}},"staticQueryHashes":["1488695104","251939775","401334301"]}