{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/javascript-this/","webpackCompilationHash":"b9fc5f7127cd37b3e5aa","result":{"data":{"markdownRemark":{"id":"6b2555cf-ccf9-5833-9750-e8488a0c3864","html":"<h3 id=\"자바스크립트와-this\"><a href=\"#%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%99%80-this\" aria-label=\"자바스크립트와 this permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자바스크립트와 This</h3>\n<p>자바스크립트는 컴파일 과정을 필요로 하지 않는 스크립트 언어이다. 인터프러터(웹 브라우저 등)가 코드를 읽고 행 by 행으로 자바스크립트를 실행 시킨다. 이 때 각각의 코드가 실행되는 환경-aka scope(범위)- 을 실행 컨텍스트(Execution Context)라고 표현한다. 여러개의 실행 컨텍스트는 자바스크립트 런타임 상에 존재하다가 코드가 실행되는 순간에 스택의 최상단에 위치하게 된다. </p>\n<p><strong>This 키워드는 자신이 불린 곳에 속하는 객체를 가리키는데, This 키워드가 가리키는 오브젝트 또한 실행 컨텍스트가 바뀜에 따라 변화하며 THIS는 동적으로 결정되게 된다.</strong></p>\n<p>덧붙여 말하면, 자바스크립트는 싱글 스레드 기반 언어이기 때문에 한 번에 하나의 작업(스택)만 처리할 수 있다. (자바스크립트 실행환경에 대한 세한 설명은 아래 링크에 잘 나와있으니 꼭 참고해보도록 하자.)\n<a href=\"https://joshua1988.github.io/web-development/translation/javascript/how-js-works-inside-engine/\">자바스크립트의 동작원리: 엔진, 런타임, 호출 스택</a></p>\n<p>브라우저 환경에서 this를 전역에서 사용하면 전역 객체인 Window를 가리킨다. NodeJS상에서 this는 global을 가리킨다. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">//top level(browser)</span>\n<span class=\"token keyword\">this</span> <span class=\"token operator\">===</span> window <span class=\"token comment\">// true</span>\n<span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">this</span> <span class=\"token operator\">===</span> window <span class=\"token comment\">// true</span></code></pre></div>\n<p>함수에서 this를 사용하면 this는 전역 객체, 즉 브라우저 상에서 window를 가리킨다. </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">FairyTale</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">author<span class=\"token punctuation\">,</span> book</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>author <span class=\"token operator\">=</span>  author<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>book <span class=\"token operator\">=</span> book<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> Story1 <span class=\"token operator\">=</span> <span class=\"token function\">FairyTale</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Anderson'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'The Little Mermaid'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'Anderson'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 'The Little Mermaid'</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Story1<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">)</span> <span class=\"token comment\">// TypeError: Cannot read property 'author' of undefined</span></code></pre></div>\n<p>코드를 쓰는 사람 입장에서는 당연히 Story1.author를 했을때 원하는 결과가 나오길 바랄 것이다. 그러나 현실은 window객체에 묶어주어야만 사용자가 생각하는 결과가 출력된다. 프로토타입 객체와 연결된 객체를 반환하려면 new 키워드와 함께 호출해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> Story2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FairyTale</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Oscar Wilde'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'The Happy Prince'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Story2<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'Oscar Wilde'</span></code></pre></div>\n<h3 id=\"strict-mode와-this\"><a href=\"#strict-mode%EC%99%80-this\" aria-label=\"strict mode와 this permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Strict Mode와 This</h3>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">checkThis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'checkthis'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//window객체</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">checkThis2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token string\">\"use strict\"</span><span class=\"token punctuation\">;</span>\n   console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'checkthis2'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//undefined</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token function\">checkThis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 함수에서 this를 사용하고 호출하면 this는 전역 객체를 가리킨다.</span>\n<span class=\"token function\">checkThis2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// strict mode에서 this는 undefined가 된다. </span></code></pre></div>\n<p>이 포스트의 상단 부분에서 가장 top level에서 this를 호출했을 때는 strict mode 여부에 관계없이 모두 윈도우 객체를 가리켰다. 그런데 여기선 왜 결과가 다를까?</p>\n<p>그 이유는 바로 위에서 설명한 this의 특성과 관계가 있다. new 키워드 없이 호출할 시 this는 전역 객체를 가리킨다. 그리고 strict mode가 도입되기 이전인 ES3까지 그 출력값은 전역 객체로 반환되었다. 그러나 이러한 behavior는 글로벌 오브젝트에 변수를 마구 덧붙여버리는 불상사를 낳게 되었고 아마 ECMA에서 이를 개선시킬 필요성을 절감하게 된 것 같다. 따라서 이 이후부터는 ES5부터 strict mode 가 추가되었고 strict mode 상에서 new 키워드 없이 함수가 호츌된다면 this를 undefined로 정의하여 버렸다. 자바스크립트도 하나의 언어이듯이 규칙, syntax적인 부분이 자바스크립트 속성에 많이 작용하는 듯 하다. </p>\n<p>시간이 되면 arrow function에서의 this에 대해서도 추후 포스팅하겠다.</p>","fields":{"slug":"/posts/javascript-this/","tagSlugs":["/tag/javascript/","/tag/this/","/tag/strict-mode/"]},"frontmatter":{"date":"2019-06-18","description":"자바스크립트와 THIS","tags":["javascript","this","strict mode"],"title":"자바스크립트와 This 이해하기"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/javascript-this/"}}}