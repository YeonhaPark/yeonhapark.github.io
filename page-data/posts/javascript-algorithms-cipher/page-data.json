{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/javascript-algorithms-cipher/","result":{"data":{"markdownRemark":{"id":"c2aac807-3c5b-5605-b0dc-18832028b795","html":"<p>비즈네르 암호는 프랑스 암호학자인 비즈네르의 이름을 따서 만들어진 고전적 암호이다. 이해하기 쉽고 실행하기도 쉽지만, 3세기 동안 암호를 깨려는 시도에서 살아남았기 때문에 ‘난공불락의 암호’라는 별명을 얻게 되었다. </p>\n<p><strong><a href=\"https://en.wikipedia.org/wiki/Vigen%C3%A8re_cipher\">From Wikipedia</a></strong>:</p>\n<blockquote>\n<p>The Vigenère cipher is a method of encrypting alphabetic text by using a series of different Caesar ciphers based on the letters of a keyword. It is a simple form of polyalphabetic substitution…In a Caesar cipher, each letter of the alphabet is shifted along some number of places; for example, in a Caesar cipher of shift 3, A would become D, B would become E, Y would become B and so on. The Vigenère cipher consists of several Caesar ciphers in sequence with different shift values.</p>\n</blockquote>\n<p>키는 텍스트의 길이에 다다를 때까지 반복된다고 가정한다. 암호는 카이사르 암호 방식을 적용하여 키에서 각각의 알파벳에 해당하는 인덱스만큼 메시지의 알파벳을 한 자리씩 미룬다.</p>\n<p>예:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token string\">\"my secret code i want to secure\"</span> <span class=\"token comment\">// message</span>\n<span class=\"token string\">\"passwordpasswordpasswordpasswor\"</span><span class=\"token comment\">// key</span></code></pre></div>\n<p>문제:</p>\n<p>키와 알파벳이 주어진 상태에서 인코드되고 디코드 될 수 있는 암호 클래스를 만들어라.</p>\n<h2 id=\"example\" style=\"position:relative;\"><a href=\"#example\" aria-label=\"example permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>Example</strong></h2>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">var</span> alphabet <span class=\"token operator\">=</span> <span class=\"token string\">'abcdefghijklmnopqrstuvwxyz'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> key <span class=\"token operator\">=</span> <span class=\"token string\">'password'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// creates a cipher helper with each letter substituted</span>\n<span class=\"token comment\">// by the corresponding character in the keyvar c = new VigenèreCipher(key, alphabet);</span>\n\nc<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token string\">'codewars'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// returns 'rovwsoiv'</span>\nc<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span><span class=\"token string\">'laxxhsj'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// returns 'waffles'</span></code></pre></div>\n<p>주어진 알파벳에 속하지 않는 모든 스트링 값은 주어진 그대로를 반환한다.</p>\n<p>예:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">c<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token string\">'CODEWARS'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// returns 'CODEWARS'</span></code></pre></div>\n<p>해당 클래스는 초기화될 때 key와 알파벳 값(변수명 abc)을 받게된다. 클래스가 인스턴스를 만들고 나서 encode 메서드에 주어진 값이 만약에 abc에 해당하는 값이 아닐 경우 이를 먼저 걸러내는 로직을 먼저 시작하자.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">VigenèreCipher</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> abc</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> key<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>abc <span class=\"token operator\">=</span> abc<span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">function</span> <span class=\"token function\">checkIfNonAlphabet</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">letters</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// 주어진 letters 값을 돌면서 abc에 해당하지 않는 값이 하나라도 있으면 false 리턴</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> letters<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>abc<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>letters<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token keyword\">function</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">letters<span class=\"token punctuation\">,</span> type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">checkIfNonAlphabet</span><span class=\"token punctuation\">(</span>letters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> letters<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 값이 false인 경우 그대로 리턴</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">encode</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token string\">'encode'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  \n\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> abc <span class=\"token operator\">=</span> <span class=\"token string\">\"abcdefghijklmnopqrstuvwxyz\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> key <span class=\"token operator\">=</span> <span class=\"token string\">\"password\"</span>\n\n<span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vigen</span><span class=\"token function\">èreCipher</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> abc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nc<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"codewars\"</span><span class=\"token punctuation\">)</span>\nc<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span><span class=\"token string\">'rovwsoiv'</span><span class=\"token punctuation\">)</span>\nc<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token string\">'waffles'</span><span class=\"token punctuation\">)</span>\nc<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span><span class=\"token string\">'laxxhsj'</span><span class=\"token punctuation\">)</span>\nc<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token string\">'CODEWARS'</span><span class=\"token punctuation\">)</span>\nc<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span><span class=\"token string\">'CODEWARS'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>그리고 암호화하고자 하는 스트링 길이만큼의 키 값을 만들어야 한다. 예를 들어 key에 해당하는 값이 ‘password’이고 암호화하고자 하는 스트링이 ‘beautiful days’라면 (16자) key는 ‘passwordpasswo’가 (16자)되어야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">VigenèreCipher</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> abc</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> key<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>abc <span class=\"token operator\">=</span> abc<span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">function</span> <span class=\"token function\">checkIfNonAlphabet</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">letters</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// 주어진 letters 값을 돌면서 abc에 해당하지 않는 값이 하나라도 있으면 false 리턴</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> letters<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>abc<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>letters<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token keyword\">function</span> <span class=\"token function\">createKey</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">originalKey<span class=\"token punctuation\">,</span> words</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// words의 길이에 맞게 키의 길이 맞추기</span>\n    <span class=\"token keyword\">const</span> keyLeng <span class=\"token operator\">=</span> originalKey<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> wordsLeng <span class=\"token operator\">=</span> words<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>keyLeng <span class=\"token operator\">&lt;</span> wordsLeng<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> difference <span class=\"token operator\">=</span> wordsLeng <span class=\"token operator\">-</span> keyLeng<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> repeated <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>difference <span class=\"token operator\">/</span> keyLeng<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> rest <span class=\"token operator\">=</span> difference <span class=\"token operator\">%</span> keyLeng<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>repeated<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> originalKey <span class=\"token operator\">+</span> originalKey<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> rest<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> originalKey <span class=\"token operator\">+</span> originalKey <span class=\"token operator\">*</span> repeated <span class=\"token operator\">+</span> originalKey<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> rest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>keyLeng <span class=\"token operator\">></span> wordsLeng<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> originalKey<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> wordsLeng<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> originalKey<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token keyword\">function</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">letters<span class=\"token punctuation\">,</span> type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">checkIfNonAlphabet</span><span class=\"token punctuation\">(</span>letters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> letters<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 값이 false인 경우 그대로 리턴</span>\n\t\t<span class=\"token keyword\">const</span> newKey <span class=\"token operator\">=</span> <span class=\"token function\">createKey</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">,</span> letters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t\t<span class=\"token comment\">// createKey 함수를 사용하여 가용할수 있는 newKey 값 얻기</span>\n\t<span class=\"token punctuation\">}</span>\n  \n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">encode</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token string\">'encode'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  \n\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> abc <span class=\"token operator\">=</span> <span class=\"token string\">\"abcdefghijklmnopqrstuvwxyz\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> key <span class=\"token operator\">=</span> <span class=\"token string\">\"password\"</span>\n\n<span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vigen</span><span class=\"token function\">èreCipher</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> abc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nc<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"codewars\"</span><span class=\"token punctuation\">)</span>\nc<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span><span class=\"token string\">'rovwsoiv'</span><span class=\"token punctuation\">)</span>\nc<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token string\">'waffles'</span><span class=\"token punctuation\">)</span>\nc<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span><span class=\"token string\">'laxxhsj'</span><span class=\"token punctuation\">)</span>\nc<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token string\">'CODEWARS'</span><span class=\"token punctuation\">)</span>\nc<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span><span class=\"token string\">'CODEWARS'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>이렇게 해서 key값을 가공했으면 이제 반복문을 돌면서 key 값의 알파벳 위치만큼 주어진 스트링 인덱스를 이동시켜서 새로운 값을 도출하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">VigenèreCipher</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> abc</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> key<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>abc <span class=\"token operator\">=</span> abc<span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">function</span> <span class=\"token function\">checkIfNonAlphabet</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">letters</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> letters<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>abc<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>letters<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token keyword\">function</span> <span class=\"token function\">createKey</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">originalKey<span class=\"token punctuation\">,</span> words</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> keyLeng <span class=\"token operator\">=</span> originalKey<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> wordsLeng <span class=\"token operator\">=</span> words<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>keyLeng <span class=\"token operator\">&lt;</span> wordsLeng<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> difference <span class=\"token operator\">=</span> wordsLeng <span class=\"token operator\">-</span> keyLeng<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> repeated <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>difference <span class=\"token operator\">/</span> keyLeng<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> rest <span class=\"token operator\">=</span> difference <span class=\"token operator\">%</span> keyLeng<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>repeated<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> originalKey <span class=\"token operator\">+</span> originalKey<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> rest<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> originalKey <span class=\"token operator\">+</span> originalKey <span class=\"token operator\">*</span> repeated <span class=\"token operator\">+</span> originalKey<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> rest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>keyLeng <span class=\"token operator\">></span> wordsLeng<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> originalKey<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> wordsLeng<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> originalKey<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">// 암호화된 값의 인덱스를 정하기 위해 keyStr값에 해당하는 인덱스와 wordStr에 해당하는 인덱스를 더하기</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">indexFinder</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">keyStr<span class=\"token punctuation\">,</span> wordStr<span class=\"token punctuation\">,</span> type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>abc<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>keyStr<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>abc<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>wordStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token keyword\">function</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">letters<span class=\"token punctuation\">,</span> type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">checkIfNonAlphabet</span><span class=\"token punctuation\">(</span>letters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> letters<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> newKey <span class=\"token operator\">=</span> <span class=\"token function\">createKey</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">,</span> letters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> newStr <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> letters<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> idx <span class=\"token operator\">=</span> <span class=\"token function\">indexFinder</span><span class=\"token punctuation\">(</span>newKey<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> letters<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>idx <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">></span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>abc<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// this.abc의 길이보다 idx가 더 길면 리셋</span>\n        idx <span class=\"token operator\">=</span> idx <span class=\"token operator\">-</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>abc<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      newStr <span class=\"token operator\">+=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>abc<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> newStr<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">encode</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token string\">'encode'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  \n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> abc <span class=\"token operator\">=</span> <span class=\"token string\">\"abcdefghijklmnopqrstuvwxyz\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> key <span class=\"token operator\">=</span> <span class=\"token string\">\"password\"</span>\n<span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vigen</span><span class=\"token function\">èreCipher</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> abc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nc<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"codewars\"</span><span class=\"token punctuation\">)</span>\nc<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span><span class=\"token string\">'rovwsoiv'</span><span class=\"token punctuation\">)</span>\nc<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token string\">'waffles'</span><span class=\"token punctuation\">)</span>\nc<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span><span class=\"token string\">'laxxhsj'</span><span class=\"token punctuation\">)</span>\nc<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token string\">'CODEWARS'</span><span class=\"token punctuation\">)</span>\nc<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span><span class=\"token string\">'CODEWARS'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>반대의 로직을 decode 메서드에 적용해준다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">VigenèreCipher</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span> abc</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> key<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>abc <span class=\"token operator\">=</span> abc<span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">function</span> <span class=\"token function\">checkIfNonAlphabet</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">letters</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// 주어진 letters 값을 돌면서 abc에 해당하지 않는 값이 하나라도 있으면 false 리턴</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> letters<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>abc<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>letters<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token keyword\">function</span> <span class=\"token function\">createKey</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">originalKey<span class=\"token punctuation\">,</span> words</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// words의 길이에 맞게 키의 길이 맞추기</span>\n    <span class=\"token keyword\">const</span> keyLeng <span class=\"token operator\">=</span> originalKey<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> wordsLeng <span class=\"token operator\">=</span> words<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>keyLeng <span class=\"token operator\">&lt;</span> wordsLeng<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> difference <span class=\"token operator\">=</span> wordsLeng <span class=\"token operator\">-</span> keyLeng<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> repeated <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>difference <span class=\"token operator\">/</span> keyLeng<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">const</span> rest <span class=\"token operator\">=</span> difference <span class=\"token operator\">%</span> keyLeng<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>repeated<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> originalKey <span class=\"token operator\">+</span> originalKey<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> rest<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> originalKey <span class=\"token operator\">+</span> originalKey <span class=\"token operator\">*</span> repeated <span class=\"token operator\">+</span> originalKey<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> rest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>keyLeng <span class=\"token operator\">></span> wordsLeng<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> originalKey<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> wordsLeng<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>key <span class=\"token operator\">=</span> originalKey<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">// 암호화된 값의 인덱스를 정하기 위해 keyStr값에 해당하는 인덱스와 wordStr에 해당하는 인덱스를 더하기</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">indexFinder</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">keyStr<span class=\"token punctuation\">,</span> wordStr<span class=\"token punctuation\">,</span> type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'encode'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>abc<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>keyStr<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>abc<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>wordStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'decode'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n\t\t\t<span class=\"token comment\">// encode는 암호화가 오른쪽 방향으로 이뤄지지만 decode는 왼쪽방향으로 이뤄진다. 그래서 키값의 인덱스만큼 왼쪽으로 이동하기 위해 해당 값을 빼준다.</span>\n      <span class=\"token keyword\">const</span> idx <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>abc<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>wordStr<span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>abc<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>keyStr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token comment\">// idx가 음수일 경우에는 this.abc의 마지막 인덱스에서 시작해서 절대값만큼 빼준다.</span>\n      <span class=\"token keyword\">return</span> idx <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>abc<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>idx<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> idx<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>  \n\t<span class=\"token punctuation\">}</span>\n  \n  <span class=\"token keyword\">function</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">letters<span class=\"token punctuation\">,</span> type</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">checkIfNonAlphabet</span><span class=\"token punctuation\">(</span>letters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> letters<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 값이 false인 경우 그대로 리턴</span>\n\t\t<span class=\"token keyword\">const</span> newKey <span class=\"token operator\">=</span> <span class=\"token function\">createKey</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">,</span> letters<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t\t<span class=\"token comment\">// createKey 함수를 사용하여 가용할수 있는 newKey 값 얻기</span>\n\t<span class=\"token punctuation\">}</span>\n  \n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">encode</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token string\">'encode'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">decode</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token string\">'decode'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> abc <span class=\"token operator\">=</span> <span class=\"token string\">\"abcdefghijklmnopqrstuvwxyz\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> key <span class=\"token operator\">=</span> <span class=\"token string\">\"password\"</span>\n\n<span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vigen</span><span class=\"token function\">èreCipher</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> abc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nc<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"codewars\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'rovwsoiv'</span>\nc<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span><span class=\"token string\">'rovwsoiv'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'codewars'</span>\nc<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token string\">'waffles'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'laxxhsj'</span>\nc<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span><span class=\"token string\">'laxxhsj'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'waffles'</span>\nc<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token string\">'CODEWARS'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'CODEWARS'</span>\nc<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span><span class=\"token string\">'CODEWARS'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'CODEWARS'</span></code></pre></div>\n<p>이렇게 하면 로직이 완성된다.</p>","fields":{"slug":"/posts/javascript-algorithms-cipher/","tagSlugs":["/tag/codewars/","/tag/algorithms/","/tag/java-script/"]},"frontmatter":{"date":"2021-06-09","description":"비즈네르 암호","tags":["codewars","Algorithms","JavaScript"],"title":"CodeWars 알고리즘 문제 풀기 (비즈네르 암호)"}}},"pageContext":{"slug":"/posts/javascript-algorithms-cipher/"}},"staticQueryHashes":["1488695104","251939775","401334301"]}