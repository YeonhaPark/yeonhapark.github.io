{"componentChunkName":"component---src-templates-index-template-js","path":"/","result":{"data":{"site":{"siteMetadata":{"title":"Yonas Dev Log"}},"allMarkdownRemark":{"nodes":[{"fields":{"slug":"/blog/debugging/"},"excerpt":"Debugging은 스크립트 내 에러를 검출해 제거하는 일련의 과정을 의미한다. 모던 브라우저와 호스트 환경 대부분은 개발자 도구 안에 UI…","timeToRead":3,"frontmatter":{"date":"February 09, 2022","description":"Chrome 브라우저와 Postman을 이용하여 디버깅 해보기","title":"디버깅(Debugging)","tags":["debugging","chrome"]}},{"fields":{"slug":"/blog/why-we-use-virtual-dom/"},"excerpt":"가상 돔을 왜 쓸까? => 리얼 돔이 비효율적이기 때문에 애초에 DOM은 서버에 의해 렌더링되는 정적인 UI를 염두에 두고 설계되었다. 리얼 돔에서 다음과 같은 스크립트를 통해 DOM에 변경을 가하는 경우를 보자. 브라우저가 HTML…","timeToRead":1,"frontmatter":{"date":"January 04, 2022","description":null,"title":"Virtual DOM을 사용하는 이유","tags":["react","virtualDOM"]}},{"fields":{"slug":"/blog/how-webpage-is-made/"},"excerpt":"22/02/10에 업데이트 되었습니다. 웹페이지가 로드될 때, 웹 클라이언트는 서버에게 리소스(html…","timeToRead":4,"frontmatter":{"date":"December 17, 2021","description":null,"title":"웹페이지가 사용자에게 보여지는 과정","tags":["html","web-development"]}},{"fields":{"slug":"/blog/big-o-explained/"},"excerpt":"유투브 coderbyte 채널의 The Complete Guide to Big O Notation & Complexity Analysis for Algorithms를 듣고 정리 What is Big O? Big-O…","timeToRead":6,"frontmatter":{"date":"December 09, 2021","description":"Big O 표기법은 무엇이고 왜 Big O를 사용하는지","title":"Big O Explained","tags":["programming","algorithm","big-o"]}},{"fields":{"slug":"/blog/what-is-cors/"},"excerpt":"CORS는 Cross—Origin Resource Sharing(교차 출처 리소스 공유)의 약자이다. 브라우저는 보안상의 이유로 웹 애플리케이션이 리소스를 요청할 때 자신의 출처와 동일한 출처의 리소스만 허락하는데, HTTP 헤더에 CORS…","timeToRead":6,"frontmatter":{"date":"December 01, 2021","description":null,"title":"CORS란? 그리고 이를 해결하는 방법은?","tags":["network","CORS"]}},{"fields":{"slug":"/blog/javascript-iterable/"},"excerpt":"Iterable은 ES6의 등장과 함께 자바스크립트의 어떤 콜렉션도 for..of loop를 사용하여 반복 가능한 객체로 만들어주는 유용한 기능이다. 객체의  키값에 특정 형태의 함수가 들어있다면, 이를 반복 가능한 객체(iterable object…","timeToRead":2,"frontmatter":{"date":"November 23, 2021","description":"객체에 Symbol.iterator 속성을 적용하여 자바스크립트의 어떤 콜렉션도 반복 가능한 객체로 만들 수 있다.","title":"JavaScript Iterable","tags":["javascript","iterable"]}},{"fields":{"slug":"/blog/react-optimization-using-memoization/"},"excerpt":"React useCallback을 통한 성능 최적화 eslint문법을 적용하고 개발을 하다보면 한번씩 react-hooks/exhaustive-deps 에러를 맞닦뜨리는 경험을 하게 된다. 가  넣으라고 해서 넣었는데, 위 코드는 infinite…","timeToRead":3,"frontmatter":{"date":"November 15, 2021","description":null,"title":"useCallback과 React.memo를 통한 리액트 성능 최적화","tags":["react","optimization"]}},{"fields":{"slug":"/blog/event-bubbling/"},"excerpt":"이벤트 버블링 Event bubbling은 어떤 엘러먼트에서 이벤트가 발생했을때 해당 엘러먼트의 이벤트 핸들러만 호출되고 끝나는게 아니고 그 엘러먼트의 부모 엘러먼트가 지닌 이벤트 핸들러까지 호출되는 현상을 말한다. 이벤트가 DOM…","timeToRead":5,"frontmatter":{"date":"November 03, 2021","description":"event.target과 event.currentTarget의 차이점은 무엇일까?","title":"이벤트 버블링과 캡처링","tags":["event","html"]}},{"fields":{"slug":"/blog/javascript-map-and-set/"},"excerpt":"Map  is similar to . But the main difference is that  allows keys of any type.  – creates the map.  – stores the value by the key…","timeToRead":3,"frontmatter":{"date":"September 05, 2021","description":null,"title":"JavaScript Map and Set","tags":["javascript"]}}]},"markdownRemark":{"html":"<h1>Yonas Dev Log</h1>\n<p>Dev Journal &#x26; Frontend Study Log</p>","frontmatter":{"title":"Yonas Dev Log"}}},"pageContext":{"slug":"/"}},"staticQueryHashes":["2555585279","2841359383","3159585216"]}